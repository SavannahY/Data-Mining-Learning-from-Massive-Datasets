# -*- coding: utf-8 -*-
"""ESE545 Project 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1P5X9Yv8Jfs8DHt3MhXGcbqnn27iTlNLY
"""



data_root = 'include your data root here'

import numpy as np
import matplotlib.pyplot as plt
from matplotlib.pyplot import figure
import torch
import torchvision
from torchvision import datasets, transforms
import math
import timeit
import torch.nn as nn
import torch.nn.functional as F
from torch.autograd import Variable
import torch.optim as optim

from ESE545P2helper import *

"""## Problem 1
- data preprocess
- data visualization
"""

X_train_full = np.load(data_root+'/train.npy')
y_train_full = np.load(data_root+'/train_labels.npy')
X_test_full = np.load(data_root+'/test.npy')
y_test_full = np.load(data_root+'/test_labels.npy')

visualization(X_train_full,y_train_full)

"""#Problem 2
- PEGASOS
"""

# for problem 2, use two classes: 2&5
X_train, y_train, X_test, y_test = dataprocess_bi(X_train_full,y_train_full,X_test_full,y_test_full)
W = pegasos(X_train,y_train)
evaluation(W,X_train,y_train,X_test,y_test)

"""# Problem 3
- adagrad
- permutation needed
"""

X_train, y_train, X_test, y_test = dataprocess_bi(X_train_full,y_train_full,X_test_full,y_test_full)
X_train, y_train = permutate_data(X_train,y_train)
W = adagrad_svm(X_train,y_train)
evaluation(W,X_train, y_train, X_test, y_test)

"""# problem 5
- one vs one
- pegasos based multi-classfier
"""

X_train, y_train, X_test, y_test = dataprocess_tri(X_train_full,y_train_full,X_test_full,y_test_full)
start = timeit.default_timer()
err_train,err_test = multiclass(X_train,y_train,X_test,y_test)
stop = timeit.default_timer()
print('final test error:',err_test[-1],'final training error:',err_train[-1],'time spent:',stop-start)
plots(err_train,err_test)

"""# Problem 6"""

X_train, y_train, X_test, y_test = data_cnn(X_train_full,y_train_full,X_test_full,y_test_full)
cnn(X_train,y_train,X_test,y_test)

